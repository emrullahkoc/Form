<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="richTextBox3.Text" xml:space="preserve">
    <value>			YAZILAN KODLAR

        int[] alan = { 0 }; // DİZİYE ALAN DEĞERİ ATIYORUM
        int[] toplam2 = { 0 };  // DİZİYE TOPLAM DEĞERİ ATIYORUM
        int[] sayac2 = { 0 };   // DİZİYE SAYAÇ DEĞERİ ATIYORUM
        int[] musluklar = new int[6];   // 6 DİZİDEN OLUŞACAK DEĞİŞKEN OLUŞTURUYORUM

        private void btnHesapla2_Click(object sender, EventArgs e)
        {
            alan[0] = Convert.ToInt32(txtAlan.Text);    // TextBox A YAZILAN DEĞERİ ALAN DEĞİŞKENİNE ATIYORUM

            string[] girilenDegerler = { txt1.Text, txt2.Text, txt3.Text, txt4.Text, txt5.Text, txt6.Text };    // TextBox A YAZILAN DEĞERİ "girilenDegerler" DEĞİŞKENİNE ATIYORUM

            for (int i = 0; i &lt; Convert.ToInt32(girilenDegerler.Length); i++)   // "girilenDegerler" UZUNLUĞU KADAR SAYDIRIYORUM
            {
                if (string.IsNullOrEmpty(girilenDegerler[i]))   // "girilenDegerler" BOŞ GEÇİLİYORSA
                {
                    girilenDegerler[i] = "0";   // "girilenDegerler" i Cİ DEĞERİNE "0" DEĞERİNİ ATIYORUM HATA ALMAMAK İÇİN
                }
            }

            musluklar[0] = Convert.ToInt32(girilenDegerler[0]); // "musluklar" DİZİSİNE DEĞERLERİ ATIYORUM
            musluklar[1] = Convert.ToInt32(girilenDegerler[1]);
            musluklar[2] = Convert.ToInt32(girilenDegerler[2]);
            musluklar[3] = Convert.ToInt32(girilenDegerler[3]);
            musluklar[4] = Convert.ToInt32(girilenDegerler[4]);
            musluklar[5] = Convert.ToInt32(girilenDegerler[5]);

            lblSonuc2.Text = Convert.ToString(degiskenSonuc(musluklar)[0] + ". " + "Saatte Doldu");     // METOTDAN GELEN DEĞERİ YAZDIRIYORUM
            lblDolan2.Text = Convert.ToString(toplam2[0]) + " " + "Litre Doldu";    // TOPLAMI YAZDIRIYORUM

            if (toplam2[0] &gt; alan[0])   // TOPLAM ALANDAN BÜYÜK İSE
            {
                lblTasan2.Text = Convert.ToString(toplam2[0] - alan[0]) + " " + "Litre Taştı";  // TAŞAN LİTREYİ YAZDIRIYORUM
            }
            else if (toplam2[0] == alan[0])     // TOPLAM ile ALAN EŞİT İSE
            {
                lblTasan2.Text = "Tam Doldu";
            }
            if (toplam2[0] &lt;= 0) // TOPLAM 0 EŞİT VEYA KÜÇÜK İSE
            {
                lblSonuc2.Text = "DOLUM YAPILAMADI";
                lblTasan2.Text = " ";   // LABEL SİLİYORUM
                lblDolan2.Text = " ";   // LABEL SİLİYORUM
            }

            btnHesapla2.Enabled = false;    // HESAPLAYA 2. DEFA BASMASINI ENGELLİYORUM
            blokeTextBox(); // TextBox BLOKE METODUNU ÇAĞIRIYORUM

            txtAlan.Enabled = false;
            btnTemizle.Enabled = true;  // TEMİZLE BUTONUNU AKTİFLEŞTİRİYORUM Kİ BAŞTAN GİRİŞ YAPABİLSİN HATA ALMASIN
        }

        private void blokeTextBox() //TextBox LARI BLOKELEMEK İÇİN METOT OLUŞTURUYORUM
        {
            txt1.Enabled = false;   //TextBox LARI BLOKLUYORUM
            txt2.Enabled = false;
            txt3.Enabled = false;
            txt4.Enabled = false;
            txt5.Enabled = false;
            txt6.Enabled = false;
        }

        private int[] degiskenSonuc(int[] degisken)     // SAATİ HESAPLAMAK İÇİN DİZİ PARAMETRELİ METOT OLUŞTURUYORUM
        {
            for (int i = 0; i &lt; alan[0]; i++)   // GİRİLEN ALAN KADAR SAYDIRIYORUM
            {
                if (toplam2[0] &lt; alan[0])   // EĞER TOPLAM KÜÇÜKSE ALANDAN 
                {
                    toplam2[0] += degisken[0] + degisken[1] + degisken[2] - degisken[3] - degisken[4] - degisken[5];    // TOPLAMA VE ÇIKARMA İŞLEMİNİ DEĞİŞKENE ATIYORUM
                    sayac2[0]++;    // SAYACI 1 ARTTIRIYORUM
                }
            }
            return sayac2;  // SAYAÇ DEĞERİNİ DİZİ OLARAK DIŞARI ÇIKARIYORUM 
        }

        private void txtAlan_TextChanged(object sender, EventArgs e)    // ALAN DEĞERİNE GİRİŞ YAPILDIĞINDA
        {
            txt1.Enabled = true;    // TextBox DOLUM YAPAN MUSLUK 1 AÇIYORUM
            txt4.Enabled = true;    // TextBox BOŞALTIM YAPAN MUSLUK 1 AÇIYORUM
        }

        private void btnTemizle_Click(object sender, EventArgs e)   
        {
            txt1.Text = "";     // TextBox LARA BOŞ DEĞER ATAMASI YAPIYORUM
            txt2.Text = "";
            txt3.Text = "";
            txt4.Text = "";
            txt5.Text = "";
            txt6.Text = "";
            txtAlan.Text = "";
            alan[0] = 0;        // DİZİ DEĞİŞKENLERİNİ SIFIRLIYORUM
            toplam2[0] = 0;
            sayac2[0] = 0;
            blokeTextBox();     // TextBox BLOKE METODUNU ÇAĞIRIYORUM
            btnHesapla2.Enabled = false;
            txtAlan.Enabled = true;
            btnTemizle.Enabled = false;
        }

        private void havuzProgrami_Load(object sender, EventArgs e)     // AÇILIŞTA OLACAK İŞLEMLERİ YAZIYORUM
        {
            blokeTextBox();     // TextBox BLOKE METODUNU ÇAĞIRIYORUM
            btnHesapla2.Enabled = false;    // BUTONLARI PASİF YAPIYORUM Kİ DEĞER GİRMEDEN BOŞA BASAMASIN
            btnTemizle.Enabled = false;
        }
        private void txt1_TextChanged(object sender, EventArgs e)
        {
            txt2.Enabled = true;    // TextBox LARI SIRAYLA AÇTIRIYORUM
        }
        private void txt2_TextChanged(object sender, EventArgs e)
        {
            txt3.Enabled = true;    // TextBox LARI SIRAYLA AÇTIRIYORUM
        }
        private void txt4_TextChanged(object sender, EventArgs e)
        {
            txt5.Enabled = true;    
            btnHesapla2.Enabled = true;     // BOŞALAN MUSLUKTA GİRİLDİKTEN SONRA HESAPLAMA BUTONU AKTİF HALE GETİRİYORUM
        }
        private void txt5_TextChanged(object sender, EventArgs e)
        {
            txt6.Enabled = true;    // TextBox LARI SIRAYLA AÇTIRIYORUM
        }</value>
  </data>
  <data name="richTextBox2.Text" xml:space="preserve">
    <value>            			YAZILAN KODLAR

        int[] toplam = { 0 };   // TOPLAMI YAZDIRMAK İÇİN DIŞARIDA TUTUYORUM
        private void btnHesapla_Click(object sender, EventArgs e)
        {
            int[] musluklar = { 200, 100, 150 };    // MUSLUKLARA DEĞERLERİ VERİYORUM
            lblSonuc.Text = Convert.ToString(sonuc(musluklar)[0]) + ". " + "Saatte Doldu";  // METOTDAN GELEN "SAYAÇ" DEĞERİNİ YAZDIRIYORUM
            lblTasan.Text = Convert.ToString((toplam[0]) - 100000) + " " + "Litre Taştı";   // TOPLAMDAN ÇIKIYORUM (TAŞMA OLDUĞU İÇİN)
            lblDolan.Text = Convert.ToString(toplam[0]) + " " + "Litre Doldu";  // KAÇ LİTRE DOLDUĞUNU YAZDIRIYORUM
            btnHesapla.Enabled = false; // HESAPLA BUTONUNU PASİF HALE GETİRİYORUM TEK SEFERLİK İŞLEM OLDUĞU İÇİN
        }
        private int[] sonuc(int[] musluk)   //SAATİ HESAPLAMAK İÇİN DİZİ PARAMETRELİ METOT OLUŞTURUYORUM
        {
            int[] sayac = { 0 };    // SAAT İÇİN SAYAÇ DEĞİŞKENİ OLUŞTURUYORUM
            for (int i = 0; i &lt; 1000; i++)  // 1000 E KADAR SAYDIRIYORUM
            {
                if (toplam[0] &lt; 100000) // TOPLAM 1000 DEN KÜÇÜK MÜ DİYE KONTROL EDİYORUM
                {
                    sayac[0]++;     // SAYAÇ 1 ARTTIRIYORUM
                    toplam[0] += musluk[0] + musluk[1] - musluk[2];     // TOPLAMA VE ÇIKARMA İŞLEMİNİ DEĞİŞKENE ATIYORUM
                }
            }
            return sayac;   // SAYAÇ DEĞERİNİ DİZİ OLARAK DIŞARI ÇIKARIYORUM
        }</value>
  </data>
  <data name="richTextBox1.Text" xml:space="preserve">
    <value>100.000 litrelik bir havuzu 
1. musluk saatte 200 litre su dolduruyor.
2. musluk saatte 100 litre su dolduruyor.
2. musluk saatte 150 litre su boşaltıyor.

Bu havuz kaç saatte dolar.
Metod kullanarak dizi olarak parametre alması ve geriye dizi olarak değer döndürerek ekrana yazdırması gerekmektedir.</value>
  </data>
</root>