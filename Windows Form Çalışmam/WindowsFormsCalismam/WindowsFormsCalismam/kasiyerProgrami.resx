<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="rtxbYazilanKodlar.Text" xml:space="preserve">
    <value>			YAZILAN KODLAR

        ArrayList kasiyerler = new ArrayList(); // SEÇİLEN KASİYERLERİ TUTMAK İÇİN ArrayList OLUŞTURULUYOR
        ArrayList tarih = new ArrayList();  // SEÇİLEN TARİHLERİ TUTMAK İÇİN ArrayList OLUŞTURULUYOR

        double toplam = 0;  // KASİYER ÜRÜN TOPLAMLARI İÇİN DEĞİŞKEN OLUŞTURULUYOR
        char ayrac = ',';   // AYRAÇ İÇİN DEĞİŞKEN OLUŞTURULUYOR
        double toplamSatislar = 0;  // ALT TOPLAM İÇİN DEĞİŞKEN OLUŞTURULUYOR

        private void kasiyerProgrami_Load(object sender, EventArgs e)   // PROGRAM ÇALIŞTIĞINDA HATA ALMAMAK İÇİN BUTON VE ListBox BLOKELENİYOR
        {
            btnTemizle.Enabled = false;
            btnHesapla.Enabled = false;
            lstUrun.Enabled = false;
        }

        private void lstKasiyer_SelectedIndexChanged(object sender, EventArgs e)
        {
            kasiyerler.Add(lstKasiyer.SelectedItem.ToString()); // ArrayList SEÇİLEN KASİYERLERİ KAYDEDİYOR
            lstUrun.Enabled = true;     // KASİYER SEÇİLDİKTEN SONRA ÜRÜN AKTİF HALE GELİYOR İLK SEÇİM KASİYER OLMASI İÇİN
            tarih.Add(dtTarih.Text);    // ArrayList SEÇİLEN TARİHİ KAYDEDİYOR
        }

        private void lstUrun_SelectedIndexChanged(object sender, EventArgs e)
        {
            btnHesapla.Enabled = true;  // ÜRÜN DE SEÇİLDİKTEN SONRA BUTONLAR AKTİF HALE GETİRİLİYOR
            btnTemizle.Enabled = true;
            lstSatis.Items.Add(dtTarih.Text + "," + lstKasiyer.SelectedItem.ToString() + "," + lstUrun.SelectedItem.ToString()); // SATIŞ ListBox A SEÇİMLER GÖNDERİLİYOR
            lstIslemGecmisi.Items.Add(dtTarih.Text + ",\t" + lstKasiyer.SelectedItem.ToString() + ",\t" + lstUrun.SelectedItem.ToString()); // SEÇİMLERİ İŞLEM GEÇMİŞİNE EKLİYOR
        }

        private void btnHesapla_Click(object sender, EventArgs e)
        {
            btnTemizle.Enabled = false;     // TEMİZLE BUTONU BLOKELENİYOR
            dtTarih.Enabled = true;     // TARİH BLOKESİNİ KALDIRIYOR
            DateTime tarihl = DateTime.Now;     // BUGÜNÜN TARİHİNİ ALIR

            for (int j = 0; j &lt; kasiyerler.Count; j++)  // KASİYELER DÖNÜYOR
            {
                toplam = 0;
                for (int i = 0; i &lt; lstSatis.Items.Count; i++)  // KASİYERİN SEÇİLEN ÜRÜNLERİ VE TUTARLARI DÖNÜYOR
                {
                    string[] urunler = lstSatis.Items[i].ToString().Split(ayrac);   // AYRAÇ YARDIMI İLE (KASİYER-ÜRÜN-FİYAT) BÖLÜNÜYOR
                    if (kasiyerler[j].ToString() == urunler[1].ToString() &amp;&amp; tarih[j].ToString() == urunler[0].ToString())      // KASİYER VE ÜRÜN EŞLEŞİYORSA - TARİH VE ÜRÜN EŞLEŞİYORSA
                    {
                        toplam += Convert.ToDouble(urunler[3]);     // AYRAÇ YARDIMIYLA BÖLÜNEN 3 DİZİ TOPLAMA EKLENİYOR
                        toplamSatislar += Convert.ToDouble(urunler[3]);     // AYRAÇ YARDIMIYLA BÖLÜNEN 3 DİZİ ALT TOPLAMA EKLENİYOR
                    }
                }
                lstIslemKaydi.Items.Add(tarih[j] + ",\t" + kasiyerler[j].ToString() + ",\t" + toplam.ToString()); //KASİYER VE SATIŞLARIN TOPLAMI YAZDIRILIYOR
            }

            lblSonuc.Text = toplamSatislar.ToString();  // ALT TOPLAM YAZDIRILIYOR
            kasiyerler.Clear();     // KASİYER ArrayList TEMİZLENİYOR
            tarih.Clear();      // TARİH ArrayList TEMİZLENİYOR
            lstSatis.Items.Clear();  // ListBox TEMİZLENİYOR
            btnHesapla.Enabled = false;     // HESAPLA BUTONU PASİFLEŞİYOR
        }

        private void btnTemizle_Click(object sender, EventArgs e)
        {
            lstSatis.Items.Clear(); // ListBox TEMİZLENİYOR
            kasiyerler.Clear();     // KASİYER ArrayList TEMİZLENİYOR
            btnTemizle.Enabled = false;     // TEMİZLE BUTONU PASİFLEŞİYOR
            btnHesapla.Enabled = false;     // HESAPLA BUTONU PASİFLEŞİYOR
        }</value>
  </data>
</root>